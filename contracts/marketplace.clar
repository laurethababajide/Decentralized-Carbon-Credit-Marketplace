(define-constant ERR-NOT-AUTHORIZED (err u100))
(define-constant ERR-INVALID-LISTING (err u101))
(define-constant ERR-INVALID-AMOUNT (err u102))
(define-constant ERR-INVALID-PRICE (err u103))
(define-constant ERR-INSUFFICIENT-BALANCE (err u104))
(define-constant ERR-TRADE-FAILED (err u105))
(define-constant ERR-LISTING-NOT-ACTIVE (err u108))
(define-constant ERR-INVALID-PROJECT (err u109))
(define-constant ERR-NOT-SELLER (err u113))
(define-constant ERR-INVALID-EXPIRY (err u115))
(define-constant ERR-OFFER-EXPIRED (err u112))
(define-constant ERR-NO-OFFER (err u117))
(define-constant ERR-NOT-BUYER (err u114))
(define-constant ERR-INVALID-OFFER (err u111))
(define-constant ERR-MAX-LISTINGS-EXCEEDED (err u126))
(define-constant ERR-INVALID-CURRENCY (err u128))

(define-data-var next-listing-id uint u1)
(define-data-var next-trade-id uint u1)
(define-data-var next-offer-id uint u1)
(define-data-var max-listings uint u10000)
(define-data-var platform-fee uint u100)
(define-data-var authority principal tx-sender)

(define-map listings uint {seller: principal, credit-amount: uint, price: uint, project-id: uint, active: bool, expiry: uint, currency: (string-ascii 10)})
(define-map trades uint {buyer: principal, seller: principal, credits-transferred: uint, stx-paid: uint, completed: bool, timestamp: uint})
(define-map offers uint {buyer: principal, listing-id: uint, offer-amount: uint, offer-price: uint, expiry: uint, active: bool})

(define-read-only (get-listing (listing-id uint))
  (map-get? listings listing-id))

(define-read-only (get-trade (trade-id uint))
  (map-get? trades trade-id))

(define-read-only (get-offer (offer-id uint))
  (map-get? offers offer-id))

(define-read-only (get-next-listing-id)
  (var-get next-listing-id))

(define-read-only (get-next-trade-id)
  (var-get next-trade-id))

(define-read-only (get-next-offer-id)
  (var-get next-offer-id))

(define-private (validate-amount (amount uint))
  (if (> amount u0)
    (ok amount)
    ERR-INVALID-AMOUNT))

(define-private (validate-price (price uint))
  (if (> price u0)
    (ok price)
    ERR-INVALID-PRICE))

(define-private (validate-project-id (project-id uint))
  (if (> project-id u0)
    (ok project-id)
    ERR-INVALID-PROJECT))

(define-private (validate-expiry (expiry uint))
  (if (> expiry block-height)
    (ok expiry)
    ERR-INVALID-EXPIRY))

(define-private (validate-currency (currency (string-ascii 10)))
  (if (or (is-eq currency "STX") (is-eq currency "USD"))
    (ok currency)
    ERR-INVALID-CURRENCY))

(define-private (generate-listing-id)
  (let ((id (var-get next-listing-id)))
    (var-set next-listing-id (+ id u1))
    id))

(define-private (generate-trade-id)
  (let ((id (var-get next-trade-id)))
    (var-set next-trade-id (+ id u1))
    id))

(define-private (generate-offer-id)
  (let ((id (var-get next-offer-id)))
    (var-set next-offer-id (+ id u1))
    id))

(define-public (list-credits (amount uint) (price uint) (project-id uint) (expiry uint) (currency (string-ascii 10)))
  (let ((seller tx-sender)
        (val-amount (try! (validate-amount amount)))
        (val-price (try! (validate-price price)))
        (val-project-id (try! (validate-project-id project-id)))
        (val-expiry (try! (validate-expiry expiry)))
        (val-currency (try! (validate-currency currency)))
        (current-next (var-get next-listing-id)))
    (asserts! (< current-next (var-get max-listings)) ERR-MAX-LISTINGS-EXCEEDED)
    (asserts! (>= (contract-call? .carbon-token get-balance seller) val-amount) ERR-INSUFFICIENT-BALANCE)
    (let ((new-listing-id (generate-listing-id)))
      (map-set listings new-listing-id
        {seller: seller, credit-amount: val-amount, price: val-price, project-id: val-project-id, active: true, expiry: val-expiry, currency: val-currency})
      (print {event: "credits-listed", id: new-listing-id})
      (ok new-listing-id))))

(define-public (buy-credit (listing-id uint) (buy-amount uint))
  (let ((listing (unwrap! (map-get? listings listing-id) ERR-INVALID-LISTING))
        (val-buy-amount (try! (validate-amount buy-amount)))
        (seller (get seller listing))
        (price (get price listing))
        (credit-amount (get credit-amount listing))
        (required-stx (* val-buy-amount price))
        (trade-id (generate-trade-id)))
    (asserts! (get active listing) ERR-LISTING-NOT-ACTIVE)
    (asserts! (<= val-buy-amount credit-amount) ERR-INVALID-AMOUNT)
    (asserts! (< block-height (get expiry listing)) ERR-OFFER-EXPIRED)
    (try! (stx-transfer? required-stx tx-sender seller))
    (try! (contract-call? .carbon-token transfer-from seller tx-sender val-buy-amount))
    (if (is-eq val-buy-amount credit-amount)
      (map-set listings listing-id (merge listing {active: false}))
      (map-set listings listing-id (merge listing {credit-amount: (- credit-amount val-buy-amount)})))
    (map-set trades trade-id {buyer: tx-sender, seller: seller, credits-transferred: val-buy-amount, stx-paid: required-stx, completed: true, timestamp: block-height})
    (print {event: "trade-executed", trade-id: trade-id})
    (ok trade-id)))

(define-public (cancel-listing (listing-id uint))
  (let ((listing (unwrap! (map-get? listings listing-id) ERR-INVALID-LISTING)))
    (asserts! (is-eq tx-sender (get seller listing)) ERR-NOT-SELLER)
    (asserts! (get active listing) ERR-LISTING-NOT-ACTIVE)
    (map-set listings listing-id (merge listing {active: false}))
    (print {event: "listing-cancelled", id: listing-id})
    (ok true)))

(define-public (make-offer (listing-id uint) (offer-amount uint) (offer-price uint) (expiry uint))
  (let ((val-offer-amount (try! (validate-amount offer-amount)))
        (val-offer-price (try! (validate-price offer-price)))
        (val-expiry (try! (validate-expiry expiry)))
        (listing (unwrap! (map-get? listings listing-id) ERR-INVALID-LISTING)))
    (asserts! (get active listing) ERR-LISTING-NOT-ACTIVE)
    (asserts! (<= val-offer-amount (get credit-amount listing)) ERR-INVALID-AMOUNT)
    (let ((offer-id (generate-offer-id)))
      (map-set offers offer-id {buyer: tx-sender, listing-id: listing-id, offer-amount: val-offer-amount, offer-price: val-offer-price, expiry: val-expiry, active: true})
      (print {event: "offer-made", id: offer-id})
      (ok offer-id))))

(define-public (accept-offer (offer-id uint))
  (let ((offer (unwrap! (map-get? offers offer-id) ERR-NO-OFFER))
        (listing-id (get listing-id offer))
        (listing (unwrap! (map-get? listings listing-id) ERR-INVALID-LISTING))
        (buyer (get buyer offer))
        (offer-amount (get offer-amount offer))
        (offer-price (get offer-price offer))
        (required-stx (* offer-amount offer-price))
        (seller (get seller listing))
        (trade-id (generate-trade-id)))
    (asserts! (is-eq tx-sender buyer) ERR-NOT-BUYER)
    (asserts! (get active offer) ERR-INVALID-OFFER)
    (asserts! (< block-height (get expiry offer)) ERR-OFFER-EXPIRED)
    (asserts! (get active listing) ERR-LISTING-NOT-ACTIVE)
    (try! (stx-transfer? required-stx tx-sender seller))
    (try! (contract-call? .carbon-token transfer-from seller tx-sender offer-amount))
    (if (is-eq offer-amount (get credit-amount listing))
      (map-set listings listing-id (merge listing {active: false}))
      (map-set listings listing-id (merge listing {credit-amount: (- (get credit-amount listing) offer-amount)})))
    (map-set offers offer-id (merge offer {active: false}))
    (map-set trades trade-id {buyer: buyer, seller: seller, credits-transferred: offer-amount, stx-paid: required-stx, completed: true, timestamp: block-height})
    (print {event: "offer-accepted", offer-id: offer-id, trade-id: trade-id})
    (ok trade-id)))

(define-public (cancel-offer (offer-id uint))
  (let ((offer (unwrap! (map-get? offers offer-id) ERR-NO-OFFER)))
    (asserts! (is-eq tx-sender (get buyer offer)) ERR-NOT-BUYER)
    (asserts! (get active offer) ERR-INVALID-OFFER)
    (map-set offers offer-id (merge offer {active: false}))
    (print {event: "offer-cancelled", id: offer-id})
    (ok true)))

(define-public (set-platform-fee (new-fee uint))
  (asserts! (is-eq tx-sender (var-get authority)) ERR-NOT-AUTHORIZED)
  (var-set platform-fee new-fee)
  (ok true))

(define-public (set-max-listings (new-max uint))
  (asserts! (is-eq tx-sender (var-get authority)) ERR-NOT-AUTHORIZED)
  (var-set max-listings new-max)
  (ok true))